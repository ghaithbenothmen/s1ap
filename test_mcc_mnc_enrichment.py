#!/usr/bin/env python3
"""
Test du syst√®me d'enrichissement MCC-MNC am√©lior√©
=================================================

Ce script teste les nouvelles fonctionnalit√©s d'enrichissement avec la table JSON.
"""

import sys
import json
from pathlib import Path

# Ajouter le chemin source
sys.path.append(str(Path(__file__).parent / "src"))

from s1ap_decoder.ie_analyzer import InformationElementAnalyzer


def test_mcc_mnc_enrichment():
    """Test complet du syst√®me d'enrichissement MCC-MNC"""
    
    print("üß™ TEST D'ENRICHISSEMENT MCC-MNC AM√âLIOR√â")
    print("=" * 60)
    
    # Initialiser l'analyseur
    analyzer = InformationElementAnalyzer()
    
    # V√©rifier le chargement de la table
    table_size = len(analyzer._mcc_mnc_table) if analyzer._mcc_mnc_table else 0
    print(f"üìä Table MCC-MNC charg√©e: {table_size} entr√©es")
    
    if table_size == 0:
        print("‚ùå ERREUR: Table MCC-MNC non charg√©e!")
        return False
    
    # Test cases comprehensifs
    test_cases = [
        # Format: (mcc, mnc, description)
        (605, 1, "Tunisia Orange (2-digit MNC)"),
        (605, 1, "Tunisia Orange (avec z√©ro initial)"),
        (605, 2, "Tunisia TT Mobile"),
        (605, 3, "Tunisia Ooredoo"),
        (208, 1, "France Orange"),
        (208, 10, "France SFR"), 
        (310, 260, "USA T-Mobile (3-digit MNC)"),
        (1, 1, "Test International"),
        (999, 99, "Invalid high values"),
        (0, 0, "Invalid zero values"),
        (None, None, "Null values"),
    ]
    
    print(f"\nüîç TESTS D'ENRICHISSEMENT:")
    print("-" * 50)
    
    passed_tests = 0
    total_tests = len(test_cases)
    
    for i, (mcc, mnc, description) in enumerate(test_cases, 1):
        print(f"\n{i:2d}. {description}")
        print(f"    MCC: {mcc}, MNC: {mnc}")
        
        try:
            # Test de la fonction d'enrichissement
            result = analyzer._get_network_info(mcc, mnc)
            
            # Afficher les r√©sultats
            country = result.get("country", "N/A")
            operator = result.get("operator", "N/A")
            source = result.get("source", "N/A")
            iso_code = result.get("iso_code", "N/A")
            
            print(f"    ‚Üí Pays: {country}")
            print(f"    ‚Üí Op√©rateur: {operator}")
            print(f"    ‚Üí Source: {source}")
            print(f"    ‚Üí ISO: {iso_code}")
            
            # Crit√®res de validation
            if mcc and mnc and 200 <= mcc <= 999 and 0 <= mnc <= 999:
                # Cas valides - doit avoir des infos ou au moins le pays
                if country != "Unknown" or source in ["mcc_mnc_table_exact", "mcc_mnc_table_partial"]:
                    print(f"    ‚úÖ R√âUSSI")
                    passed_tests += 1
                else:
                    print(f"    ‚ö†Ô∏è  PARTIEL (aucune info trouv√©e pour MCC/MNC valide)")
                    passed_tests += 0.5
            else:
                # Cas invalides - doit retourner "Unknown" avec erreur appropri√©e
                if country == "Unknown" and "error" in result:
                    print(f"    ‚úÖ R√âUSSI (erreur correctement g√©r√©e)")
                    passed_tests += 1
                else:
                    print(f"    ‚ùå √âCHEC (erreur mal g√©r√©e)")
            
        except Exception as e:
            print(f"    ‚ùå EXCEPTION: {e}")
    
    print(f"\n" + "=" * 60)
    print(f"üìä R√âSULTATS FINAUX:")
    print(f"    Tests r√©ussis: {passed_tests}/{total_tests}")
    print(f"    Taux de r√©ussite: {(passed_tests/total_tests)*100:.1f}%")
    
    # Test sp√©cifique du cas Tunisia Orange (exemple principal)
    print(f"\nüéØ TEST SP√âCIFIQUE: Tunisia Orange (MCC=605, MNC=1)")
    print("-" * 50)
    result = analyzer._get_network_info(605, 1)
    
    expected_values = {
        "country": "Tunisia",
        "operator": "Orange",
        "iso_code": "TN"
    }
    
    all_correct = True
    for key, expected in expected_values.items():
        actual = result.get(key, "").upper() if key == "iso_code" else result.get(key, "")
        expected_upper = expected.upper() if key == "iso_code" else expected
        
        if expected_upper in actual or actual == expected_upper:
            print(f"    ‚úÖ {key}: {actual} (attendu: {expected})")
        else:
            print(f"    ‚ùå {key}: {actual} (attendu: {expected})")
            all_correct = False
    
    if all_correct:
        print(f"    üéâ Test Tunisia Orange: R√âUSSI!")
    else:
        print(f"    ‚ö†Ô∏è  Test Tunisia Orange: PARTIEL")
    
    print(f"\nüîß INFORMATIONS DE DIAGNOSTIC:")
    if analyzer._mcc_mnc_table:
        # Rechercher Tunisia dans la table
        tunisia_entries = [entry for entry in analyzer._mcc_mnc_table 
                          if "tunisia" in entry.get("country", "").lower()]
        print(f"    ‚Ä¢ Entr√©es Tunisia trouv√©es: {len(tunisia_entries)}")
        
        if tunisia_entries:
            print(f"    ‚Ä¢ Premi√®res entr√©es Tunisia:")
            for entry in tunisia_entries[:3]:
                mcc = entry.get("mcc", "N/A")
                mnc = entry.get("mnc", "N/A") 
                network = entry.get("network", "N/A")
                print(f"      - MCC {mcc}, MNC {mnc}: {network}")
    
    success_rate = (passed_tests / total_tests) * 100
    return success_rate >= 80  # 80% de r√©ussite minimum


def main():
    """Test principal"""
    print("üöÄ D√âMARRAGE DES TESTS D'ENRICHISSEMENT MCC-MNC")
    
    success = test_mcc_mnc_enrichment()
    
    if success:
        print(f"\nüéâ TOUS LES TESTS R√âUSSIS!")
        print(f"‚úÖ Le syst√®me d'enrichissement MCC-MNC fonctionne correctement")
        print(f"‚úÖ La table JSON est correctement utilis√©e")
        return 0
    else:
        print(f"\n‚ö†Ô∏è  CERTAINS TESTS ONT √âCHOU√â")
        print(f"üîß V√©rifiez la table MCC-MNC et les fonctions d'enrichissement")
        return 1


if __name__ == "__main__":
    sys.exit(main())
